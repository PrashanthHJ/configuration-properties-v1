{
    "/pom.xml": [
        "Generate a serverless.yml file to manage the serverless deployment configuration.",
        "Include DynamoDB configuration for a single table in the serverless.yml file.",
        "Define environment variables for the Lambda functions in the serverless.yml file.",
        "Add necessary plugins like serverless-offline and serverless-plugin-typescript in the serverless.yml file.",
        "Configure separate stages (e.g., dev and prod) and IAM roles for CRUD permissions in the serverless.yml file.",
        "Specify deployment options in the serverless.yml file.",
        "Translate Maven dependencies to equivalent npm packages and include them in package.json.",
        "For HTTP connectors, use 'axios' or 'node-fetch' for making HTTP requests in Node.js.",
        "For DynamoDB connectors, use AWS SDK for JavaScript to interact with DynamoDB.",
        "For JMS connectors, use a library like 'amqplib' or 'stompit' for message queue interactions.",
        "For SOAP connectors, use 'soap' or 'strong-soap' npm packages for SOAP service interactions.",
        "For VM connectors, consider using in-memory data structures or message queues like AWS SQS.",
        "For ObjectStore connectors, use AWS S3 or DynamoDB for storing objects.",
        "For Secure Configuration Property Module, use AWS Secrets Manager or environment variables for secure configurations.",
        "Ensure all MuleSoft connectors are mapped to their Node.js equivalents with appropriate logic.",
        "Do not create 'handler', 'route', 'logger', 'service', or 'middleware' files for this configuration file."
    ],
    "/src/main/resources/log4j2.xml": [
        "Create a logging utility in the utils directory to handle logging using a library like 'winston' or 'log4js' in Node.js.",
        "Configure the logging utility to support rolling file logs with a size limit of 10 MB and a maximum of 10 files, similar to the RollingFile appender in log4j2.xml.",
        "Set up environment variables to define log file paths and other configurations, similar to the use of sys:mule.home and sys:file.separator in the MuleSoft configuration.",
        "Ensure the logging utility can handle different log levels (e.g., DEBUG, WARN, INFO) and can be configured dynamically based on environment variables.",
        "Integrate the logging utility with other components by importing and using it in the main entry file (e.g., index.ts) and any other relevant modules.",
        "Do not create 'handler', 'route', 'logger', 'service', or 'middleware' files specifically for this configuration, as it is a global logging configuration.",
        "Ensure that the logging utility is capable of asynchronous logging, similar to the AsyncLogger in log4j2.xml.",
        "Consider using AWS CloudWatch for centralized logging if deploying on AWS Lambda, and configure the logging utility to send logs to CloudWatch."
    ],
    "/src/main/resources/api/configuration-properties-api.raml": [
        "Convert the RAML data types into OpenAPI schemas.",
        "Translate each RAML endpoint into an OpenAPI path.",
        "Translate RAML security schemes into OpenAPI security schemes.",
        "Create an '.env' file since the source file does not contain any FLOW component or Element:Flow.",
        "Individualize the RequestDataType and ResponseDataType for every endpoint, using HTTP methods: GET, POST, PUT, PATCH, DELETE.",
        "Incorporate a 201 HTTP response status code for 'POST' and 'PUT' methods, 200 for 'GET' and 'PATCH', and 204 for 'DELETE'.",
        "Include the request body for 'POST', 'PUT', and 'PATCH' methods only.",
        "Include the Client Id enforcement policy in the Open API specification.",
        "Add query parameters in the URL for database filtering by a specific field.",
        "Include error responses such as 400 and 500 for every endpoint with corresponding messages.",
        "Provide JSON sample responses for every endpoint with placeholder data.",
        "Ensure the Open API specification includes HTTPS protocols, 'application/json' as MediaType, 'v1' as the version, 'client-id-required' as the trait, and 'CommonResources' as the default requisition.",
        "Include types, responses, headers, query parameters, display names, descriptions, etc., in the Open API specification.",
        "Ensure the API specification has a title and description tag in the info section."
    ],
    "/src/main/resources/api/traits/configKey.raml": [
        "Translate the RAML trait into an OpenAPI component, specifically under the headers section.",
        "Ensure the 'configKey' header is included in the OpenAPI specification with the same displayName and description.",
        "The 'configKey' should be defined as a required string type in the OpenAPI headers.",
        "Since the RAML file is a trait, focus on translating it into reusable OpenAPI components rather than endpoints.",
        "Ensure that the OpenAPI specification includes a description for the 'configKey' header, matching the RAML description.",
        "Incorporate the 'configKey' as a required header in relevant OpenAPI paths, ensuring it aligns with the RAML trait definition.",
        "Since there are no flow components, do not create controller, route, logger, service, or middleware files. Instead, focus on creating necessary configuration files like '.env'.",
        "Ensure the OpenAPI specification adheres to the latest version and includes HTTPS protocols and 'application/json' as the MediaType.",
        "Include error responses such as 400 and 500 for endpoints that utilize this trait, with appropriate messages.",
        "Incorporate a title and description in the OpenAPI info section to provide context about the API."
    ],
    "/src/main/resources/api/traits/version.raml": [
        "Convert the RAML trait into an OpenAPI component schema.",
        "Translate the RAML header 'version' into an OpenAPI header parameter.",
        "Ensure the 'version' header is marked as required in the OpenAPI specification.",
        "The 'version' header should be of type 'number' in the OpenAPI specification.",
        "Include a description for the 'version' header in the OpenAPI specification, matching the RAML description.",
        "Since the RAML file is a trait, it should be translated into a reusable component in OpenAPI.",
        "Ensure that the OpenAPI specification includes a title and description in the info section.",
        "The OpenAPI specification should use HTTPS and the media type should be 'application/json'.",
        "Incorporate the 'client-id-required' trait in the OpenAPI specification.",
        "Ensure the OpenAPI specification is compliant with the latest version of the OpenAPI standard."
    ],
    "/src/main/resources/api/traits/client-id.raml": [
        "Translate the RAML trait for 'client_id' and 'client_secret' headers into OpenAPI specification components under security schemes.",
        "Ensure that the OpenAPI specification includes a security scheme that enforces the presence of 'client_id' and 'client_secret' headers.",
        "Since the RAML file is a trait, it should be translated into reusable components in OpenAPI, specifically under the 'components' section.",
        "The OpenAPI specification should define these headers as required security headers for any endpoint that uses this trait.",
        "Ensure that the OpenAPI specification includes a description of the security requirement for 'client_id' and 'client_secret'.",
        "The OpenAPI specification should not include any flow components or elements, as the RAML file does not contain any.",
        "Create an '.env' file to manage environment variables if necessary, but do not create controller, route, logger, service, or middleware files.",
        "Incorporate the 'client-id-required' trait in the OpenAPI specification to ensure compliance with the client ID enforcement policy.",
        "Ensure that the OpenAPI specification uses HTTPS protocols and 'application/json' as the MediaType.",
        "Include error responses such as 400 and 500 for endpoints using this trait, with appropriate messages.",
        "The OpenAPI specification should include a title and description in the info section, reflecting the purpose of the API trait."
    ],
    "/src/main/resources/api/traits/intName.raml": [
        "Convert the RAML query parameters into OpenAPI query parameters. Specifically, translate the 'intergrationName' query parameter with its display name 'Integration Name', description 'Name of interface', type 'string', and mark it as required.",
        "Since the RAML file is a trait, it should be translated into a reusable component in OpenAPI, such as a parameter or a schema that can be referenced across multiple endpoints.",
        "Ensure that the OpenAPI specification includes the 'client-id-required' trait as part of the security requirements.",
        "The OpenAPI specification should include a title and description in the info section to describe the API.",
        "As the RAML file does not contain any flow components, do not create controller, route, logger, service, or middleware files. Instead, focus on creating an .env file if necessary and any other required configuration files.",
        "Incorporate error responses such as 400 and 500 for any endpoint that uses this trait, with appropriate messages in the response body.",
        "Ensure that the OpenAPI specification uses HTTPS protocols and the MediaType is 'application/json'.",
        "The version of the API should be 'v1', and it should include 'CommonResources' as the default requisition."
    ],
    "/src/main/resources/api/examples/insertproperty_resp.json": [
        "Translate the JSON structure into an OpenAPI response schema, ensuring that the 'configKey' is represented as a string and 'message' as a string within the schema.",
        "Since the file is a JSON response example, focus on creating a response component in the OpenAPI specification that reflects this structure.",
        "Ensure that the OpenAPI specification includes a 201 HTTP response status code for the POST method, as this file represents a successful creation message.",
        "Incorporate error responses such as 400 and 500 for the endpoint that uses this response, with appropriate error messages.",
        "Include a JSON sample response in the OpenAPI specification using the provided JSON structure as a placeholder.",
        "Ensure the OpenAPI specification includes the 'client-id-required' trait as part of the security requirements.",
        "Since the file does not contain any flow components, do not create controller, route, logger, service, or middleware files. Instead, focus on creating necessary configuration files like '.env'.",
        "Include a title and description in the OpenAPI specification's info section to describe the API's purpose and functionality."
    ],
    "/src/main/resources/api/examples/updateproperty_resp.json": [
        "Translate the JSON response message into an OpenAPI response schema with a 200 status code for a successful operation.",
        "Since the file is a JSON response, ensure that the OpenAPI specification includes a sample response with the message 'Configuration property updated successfully.'",
        "As the file does not contain any flow components, do not create controller, route, logger, service, or middleware files. Instead, focus on creating an OpenAPI specification file.",
        "Include error responses such as 400 and 500 in the OpenAPI specification with appropriate messages.",
        "Ensure the OpenAPI specification includes HTTPS protocols and the MediaType 'application/json'.",
        "Incorporate the Client Id enforcement policy in the OpenAPI specification.",
        "Include a title and description in the info section of the OpenAPI specification to describe the API.",
        "Ensure the OpenAPI specification is compliant with the latest version and contains no syntax errors.",
        "Do not include a request body for this JSON response as it is not applicable.",
        "Ensure the OpenAPI specification includes a 200 HTTP response status code for the successful update operation."
    ],
    "/src/main/resources/api/examples/retrieveproperty.json": [
        "The source file is a JSON configuration file containing database connection details. It does not contain any RAML or flow components, so the migration should focus on translating these configurations into environment variables in a '.env' file.",
        "Since the file is not a RAML file, there are no data types or endpoints to convert into OpenAPI schemas or paths. Instead, focus on setting up the necessary environment configurations for a NodeJs application.",
        "The JSON keys 'dbName', 'dbPort', and 'dbHost' should be translated into environment variables in the '.env' file as DB_NAME, DB_PORT, and DB_HOST respectively.",
        "Ensure that the NodeJs application is configured to read these environment variables using a package like 'dotenv'.",
        "There is no need to create controllers, routes, or services as there are no endpoints defined in the source file.",
        "The OpenAPI specification should not be generated as the source file does not define any API endpoints or methods.",
        "Focus on setting up a basic NodeJs project structure that can utilize these environment variables for database connections.",
        "Ensure that the NodeJs application is set up to handle errors gracefully, even though the source file does not specify any error handling."
    ],
    "/src/main/resources/api/examples/insertproperty_req.json": [
        "Translate the JSON structure into OpenAPI schemas, ensuring each property is accurately represented in the OpenAPI format.",
        "Since the file is a JSON request example, focus on creating a POST endpoint in the OpenAPI specification, as it likely represents a request body for data insertion.",
        "Ensure the OpenAPI specification includes a 201 HTTP response status code for the POST method, along with 400 and 500 error responses.",
        "Incorporate a request body schema in the OpenAPI specification that mirrors the JSON structure provided in the MuleSoft file.",
        "Include a security scheme in the OpenAPI specification to enforce Client Id policy, as per the MuleSoft configuration.",
        "Add a description in the info section of the OpenAPI specification to provide context about the API's purpose and functionality.",
        "Ensure the OpenAPI specification uses HTTPS protocols and 'application/json' as the MediaType.",
        "Include a sample JSON response in the OpenAPI specification with placeholder data, reflecting the structure of the request.",
        "Since the file does not contain any FLOW components, do not create controller, route, logger, service, or middleware files. Instead, focus on creating an .env file if necessary.",
        "Ensure the OpenAPI specification includes query parameters if any database filtering is implied by the JSON structure.",
        "Use 'v1' as the version in the OpenAPI specification and include the trait 'client-id-required'.",
        "Ensure the OpenAPI specification includes types, responses, headers, query parameters, display names, and descriptions as needed."
    ],
    "/src/main/resources/api/examples/retrieveIntegration-property.json": [
        "The source file is a JSON file containing integration properties, not a RAML file, so the translation should focus on converting JSON data structures into OpenAPI components.",
        "Since the file does not contain any MuleSoft flow components, the migration should not include creating controller, route, logger, service, or middleware files. Instead, focus on creating an OpenAPI specification that represents the data structure.",
        "Translate the JSON array into OpenAPI components, defining schemas for the objects within the array, such as 'IntegrationProperty' with properties 'integrationName' and 'profile'.",
        "Ensure that the OpenAPI specification includes a path that represents the retrieval of these integration properties, using the GET method with a 200 response status code.",
        "Include error responses such as 400 and 500 for the endpoint, with appropriate messages in the response body.",
        "Since the JSON data does not specify any security requirements, consider adding a default security scheme like 'client-id-required' in the OpenAPI specification.",
        "Incorporate a JSON sample response in the OpenAPI specification that reflects the structure of the provided JSON data.",
        "Ensure the OpenAPI specification includes HTTPS protocols, 'application/json' as the MediaType, and version 'v1'.",
        "Add a title and description in the info section of the OpenAPI specification to describe the API's purpose, such as 'Integration Properties API'."
    ],
    "/src/main/resources/api/examples/clearCache.json": [
        "The source file is a JSON file, not a RAML file, so the migration should focus on translating JSON data into OpenAPI components.",
        "Since the file contains a simple JSON object with a message, it should be translated into an OpenAPI response schema.",
        "There are no RAML security schemes or endpoints in the file, so no translation of security schemes or paths is needed.",
        "The file does not contain any FLOW components or elements, so no controller, route, logger, service, or middleware files should be created.",
        "Create an OpenAPI specification with a single endpoint that returns the JSON message as a response.",
        "The HTTP method for this endpoint should be GET, with a 200 status code, as the file represents a simple data retrieval.",
        "Include error responses such as 400 and 500 for the endpoint, with appropriate messages.",
        "The OpenAPI specification should include a title and description in the info section, describing the API's purpose.",
        "Ensure the OpenAPI specification uses HTTPS protocols, with 'application/json' as the MediaType and 'v1' as the version.",
        "Incorporate the 'client-id-required' trait in the OpenAPI specification, even though the source file does not specify it.",
        "The OpenAPI specification should not include a request body, as the source file represents a response.",
        "Provide a JSON sample response in the OpenAPI specification with placeholder data, reflecting the source file's content."
    ],
    "/src/main/resources/api/examples/updateproperty_req.json": [
        "Convert the JSON structure into OpenAPI schemas, ensuring each property is accurately represented in the schema definition.",
        "Since the file is a JSON example, translate it into a sample response for an OpenAPI endpoint, ensuring it aligns with the expected response format.",
        "Ensure that the OpenAPI specification includes a path that represents the operation related to updating properties, as implied by the file name 'updateproperty_req.json'.",
        "Incorporate a PUT method in the OpenAPI path to align with the update operation suggested by the file name, and ensure the response status code is 201.",
        "Include a request body schema in the OpenAPI specification for the PUT method, reflecting the structure of the provided JSON.",
        "Add error responses with status codes 400 and 500 for the endpoint, including appropriate error messages in the response body.",
        "Ensure the OpenAPI specification includes a title and description in the info section, reflecting the purpose and functionality of the API.",
        "Incorporate the Client Id enforcement policy in the OpenAPI specification, as per the guidelines.",
        "Ensure the MediaType is set to 'application/json' and the version is 'v1' in the OpenAPI specification.",
        "Include a sample JSON response in the OpenAPI specification, using the provided JSON as a placeholder.",
        "Ensure the OpenAPI specification adheres to the latest version and includes HTTPS protocols.",
        "Translate the 'properties' object in the JSON into a nested schema within the OpenAPI specification."
    ],
    "/src/main/resources/api/examples/deleteprop_resp.json": [
        "Translate the JSON structure into an OpenAPI response schema.",
        "Since the file is a JSON response, ensure that the OpenAPI specification includes a 204 status code for DELETE methods, as the file name suggests a DELETE operation.",
        "Incorporate error responses such as 400 and 500 for the DELETE endpoint, with appropriate messages in the response body.",
        "Ensure the OpenAPI specification includes a title and description in the info section to describe the API.",
        "Include a JSON sample response in the OpenAPI specification with placeholder data, reflecting the structure of the provided JSON.",
        "Since the file does not contain any flow components, do not create controller, route, logger, service, or middleware files. Instead, focus on creating an .env file if necessary.",
        "Ensure the OpenAPI specification uses HTTPS protocols, with 'application/json' as the MediaType, 'v1' as the version, and includes the trait 'client-id-required'.",
        "Include the Client Id enforcement policy in the OpenAPI specification.",
        "The API specification should include types, responses, headers, query parameters, display names, and descriptions."
    ],
    "/src/main/resources/api/examples/error/401.raml": [
        "Translate the RAML error response into an OpenAPI error response schema.",
        "Since the RAML file contains an error response, ensure that the OpenAPI specification includes a 401 Unauthorized error response with a relevant message.",
        "The RAML file does not contain any flow components, so do not create controller, route, logger, service, or middleware files. Instead, focus on creating an .env file if necessary.",
        "Ensure that the OpenAPI specification includes error responses such as 400 and 500 for every endpoint, with corresponding messages in the body.",
        "Incorporate the Client Id enforcement policy in the OpenAPI specification.",
        "Include a title and description in the OpenAPI specification's info section to describe the API.",
        "Ensure the OpenAPI specification uses HTTPS protocols, with the MediaType being 'application/json', version 'v1', the trait 'client-id-required', and 'CommonResources' as the default requisition.",
        "The OpenAPI specification should include types, responses, headers, query parameters, display names, and descriptions."
    ],
    "/src/main/resources/api/examples/error/404.raml": [
        "Translate the RAML error response into an OpenAPI error response schema.",
        "Since the RAML file is an error response, create an OpenAPI component schema for error handling.",
        "Ensure the OpenAPI specification includes a 404 error response with a message 'Record Not Found'.",
        "Do not create 'controller', 'route', 'logger', 'service', 'middleware' files as the RAML file does not contain any FLOW component.",
        "Create an '.env' file if necessary for environment-specific configurations.",
        "Include a 400 and 500 error response for every endpoint in the OpenAPI specification.",
        "Ensure the OpenAPI specification uses HTTPS protocols and 'application/json' as the MediaType.",
        "Include a title and description in the OpenAPI specification's info section to describe the API.",
        "Incorporate the Client Id enforcement policy in the OpenAPI specification.",
        "Ensure the OpenAPI specification is compliant with the latest version and has no syntax errors."
    ],
    "/src/main/java/utils/Myutils.java": [
        "Create a utility function in TypeScript to generate UUIDs using the 'uuid' library.",
        "Place the utility function in a 'utils' directory within the Node.js Serverless Framework project.",
        "Ensure the utility function is exported for use in other parts of the application.",
        "Integrate the utility function by importing it wherever UUID generation is required in the Node.js application.",
        "No need to create 'handler', 'route', 'logger', 'service', or 'middleware' files for this utility function."
    ],
    "/src/main/mule/global.xml": [
        "Create a 'serverless.yml' file in the root directory of the NodeJs project.",
        "In 'serverless.yml', configure a DynamoDB table with the necessary read/write permissions.",
        "Define environment variables in 'serverless.yml' for the Lambda functions, including any secure properties.",
        "Include plugins like 'serverless-offline' and 'serverless-plugin-typescript' in 'serverless.yml'.",
        "Set up separate stages (e.g., dev and prod) in 'serverless.yml' with IAM roles for CRUD permissions on DynamoDB.",
        "For the HTTP listener configuration, create a route in the 'routes' directory using Express.js or a similar framework.",
        "Use 'dotenv' or AWS Secrets Manager for managing secure properties and environment variables.",
        "Implement API Gateway configuration in 'serverless.yml' to handle HTTP requests.",
        "For the object store, consider using AWS S3 or DynamoDB for caching purposes.",
        "Integrate the routes in the 'index.ts' file and apply middleware for request transformation or logging.",
        "Do not create 'handler', 'route', 'logger', 'service', or 'middleware' files for the global configuration elements.",
        "Use AWS SDK for JavaScript to interact with DynamoDB in the NodeJs application.",
        "Ensure the 'dev.properties' file is converted to environment variables in the NodeJs application.",
        "Implement API autodiscovery logic using AWS API Gateway or a similar service."
    ],
    "/src/main/mule/configuration-properties-objectstore.xml": [
        "Create a utils directory to house reusable components such as sub-flows and loggers.",
        "Implement object store operations using AWS DynamoDB for storing, retrieving, and checking keys.",
        "Use AWS SDK for JavaScript to interact with DynamoDB for operations like putItem, getItem, and deleteItem.",
        "Transform MuleSoft DataWeave transformations into TypeScript functions for data manipulation.",
        "Place the logic for retrieving all keys and iterating over them in a separate utility function.",
        "Log messages should be implemented using a logging library like Winston or similar in Node.js.",
        "Integrate the utility functions in the main handler file, ensuring they are imported and used appropriately.",
        "Ensure environment variables are set up in the serverless.yml file for any configuration needed by the Lambda functions.",
        "Use serverless-offline for local development and testing of the Lambda functions.",
        "Define IAM roles in serverless.yml with permissions for CRUD operations on DynamoDB.",
        "Ensure that the serverless.yml file includes separate stages for dev and prod with appropriate configurations.",
        "Implement error handling logic in a separate utils file to ensure clean and maintainable code.",
        "Use TypeScript interfaces to define the structure of the data being processed and stored.",
        "Ensure that the serverless-plugin-typescript is included in the serverless.yml for TypeScript support.",
        "Create a separate file for each sub-flow logic in the utils directory and ensure they are modular and reusable."
    ],
    "/src/main/mule/configuration-properties-queues.xml": [
        "Create a 'serverless.yml' file in the root directory of the Node.js project to define the AWS Lambda functions and their configurations.",
        "Define a DynamoDB table in the 'serverless.yml' file for storing queue data, ensuring CRUD permissions are set for the Lambda functions.",
        "Use environment variables in the 'serverless.yml' file to manage configuration settings for the Lambda functions.",
        "Include necessary plugins like 'serverless-offline' and 'serverless-plugin-typescript' in the 'serverless.yml' file.",
        "Define separate stages (e.g., dev and prod) in the 'serverless.yml' file with appropriate IAM roles for each stage.",
        "Create a 'routes' directory and place the logic for handling VM queue listeners (e.g., 'retrieveQueue', 'insertQueue', 'updateQueue', 'DeleteQueue') as separate TypeScript files.",
        "Implement error handling logic in a 'utils' directory, creating reusable error handling modules for different error types encountered in the MuleSoft flows.",
        "Integrate the queue handling routes in the 'index.ts' file, ensuring they are properly imported and used within the AWS Lambda handler functions.",
        "Use 'aws-sdk' for interacting with DynamoDB and managing object store operations in the Node.js application.",
        "Implement the transformation logic from DataWeave to TypeScript using native JavaScript/TypeScript functions for payload manipulation.",
        "Ensure that the sleep functionality in the error handling is implemented using asynchronous JavaScript functions like 'setTimeout'."
    ],
    "/src/main/mule/configuration-properties-api.xml": [
        "Create a 'serverless.yml' file in the root directory with AWS Lambda configuration, including DynamoDB setup for a single table, environment variables, and necessary plugins like serverless-offline and serverless-plugin-typescript.",
        "Define separate stages (e.g., dev and prod) in the 'serverless.yml' file with IAM roles for CRUD permissions on the DynamoDB table.",
        "Implement HTTP listeners using AWS API Gateway and Lambda functions. Place these under the 'routes' directory, using 'axios' for HTTP requests if needed.",
        "Convert the VM queues to AWS SQS queues. Implement the logic for publish-consume using AWS SDK for Node.js. Place this logic in a 'services' directory.",
        "Scheduler logic should be implemented using AWS CloudWatch Events to trigger Lambda functions. Place this logic in the 'routes' directory.",
        "Error handling logic should be implemented using middleware in Node.js. Place this under the 'utils' directory for reusable error handling functions.",
        "Integrate the routes in the 'index.ts' file and apply middleware for request transformation or logging.",
        "Transform message logic should be implemented using utility functions in Node.js. Place these under the 'utils' directory.",
        "Loggers should be implemented using a logging library like 'winston' and placed under the 'utils' directory.",
        "Ensure all environment variables are defined in the 'serverless.yml' file and accessed in the Lambda functions using 'process.env'."
    ],
    "/src/main/mule/configuration-properties-database.xml": [
        "Create a 'dynamodb.ts' file under the 'services' directory to handle DynamoDB operations such as put-item, scan, and update-item.",
        "Use AWS SDK for JavaScript (v3) to interact with DynamoDB in the 'dynamodb.ts' service file.",
        "Create a 'logger.ts' utility in the 'utils' directory to handle logging operations, replacing MuleSoft's logger components.",
        "Implement error handling logic in a 'errorHandler.ts' file under the 'utils' directory to manage errors like 'CUSTOM:CANNOTDELETE'.",
        "Create a 'transform.ts' utility in the 'utils' directory to handle data transformations, replacing MuleSoft's DataWeave transformations.",
        "In the 'serverless.yml' file, configure a DynamoDB table named 'configuration-properties' with appropriate read/write permissions.",
        "Define environment variables in the 'serverless.yml' file for AWS credentials and other necessary configurations.",
        "Include plugins such as 'serverless-offline' and 'serverless-plugin-typescript' in the 'serverless.yml' file.",
        "Set up separate stages (e.g., dev and prod) in the 'serverless.yml' file with distinct IAM roles for CRUD operations on DynamoDB.",
        "Integrate the 'dynamodb.ts' service and 'logger.ts' utility in the 'index.ts' file, ensuring proper import and usage.",
        "Ensure that the 'index.ts' file serves as the entry point for AWS Lambda functions, orchestrating calls to the DynamoDB service and handling responses."
    ],
    "/src/main/mule/configuration-properties-impl.xml": [
        "Create a utils directory to house reusable components such as UUID generation and data transformation utilities.",
        "Use AWS SDK for JavaScript to interact with DynamoDB for CRUD operations, ensuring proper IAM roles are configured for access.",
        "Implement error handling logic in a utils directory to manage and log errors effectively.",
        "Place any HTTP request logic using axios or fetch in a services directory, ensuring proper error handling and retries.",
        "Integrate the sub-flows as separate functions within a utils directory, ensuring they can be imported and used across different Lambda functions.",
        "Ensure environment variables are set up in the serverless.yml file for configuration management.",
        "Use serverless-offline and serverless-plugin-typescript plugins for local development and TypeScript support.",
        "Define separate stages (e.g., dev and prod) in the serverless.yml file with appropriate IAM roles for each stage.",
        "Ensure that the serverless.yml file includes deployment options and configurations for AWS Lambda.",
        "Incorporate logging using a logging library like Winston or Bunyan, and ensure logs are structured and sent to CloudWatch.",
        "Ensure that the data transformation logic using DataWeave is translated into equivalent TypeScript functions.",
        "Create a routes directory for any listener or scheduler components, even though this file does not contain them, for future scalability.",
        "Ensure that the integration logic is modular and can be easily tested using a testing framework like Jest."
    ]
}